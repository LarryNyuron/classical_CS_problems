'''1. Напишите еще одну функцию, которая выч11сляет п-й элемент последовательности Фибонач•ш, используя метод вашей со6ствешrой разра6отки. Напишите
модульные тесты, которые оценивали бы прав11ль1юсть ;пой функции и се 11ро11зводителыюсть, по сравнению с другими нсрсиями, 11рс11став;1с1111ыми в этой
главе.
2. Вы видели, как можно применять простой тип int в Pyt\1011 для представления строки битов. Напишите эргономичную о6ертку для int, которую можно
было бы ис11ользовать как 1юследовательность битов (c/\CJl<lЙTc се итеративной
и реализуйте _geti tem _() ). Переопределитt• CompressedGene с 1юмощью этой
обертки.
3. Напишите программу решения задачи о ханойских 6ашнях, которая ра6отала бы
для любого количества башен.
4. Эадействуйте одноразовый шифр для шифро11щ1ия и ;1с111ифровки изображений.
'''
'''
1. Продемонстрируйте преимущество в производительности бинарного поиска
по сравнению с линейным поиском, создав список из миллиона чисел и определив, сколько времени потребуется созданным в этой главе функциям linear _
contains() и Ьinary_contains() для поиска в нем различных чисел.
2. Добавьте в dfs(), bfs() и astar() счетчик, который по;шолит увидеть, сколько
состояний просматривает каждая из этих функций в одном и том же лабиринте.
Найдите значения счетчика для 100 различных лабиринтов, чтобы получить
статистически значимые результаты.
3. Найдите решение зада'ш о миссионерах и ка1111иба.11ах /\ЛЯ разного начального
числа миссионеров и каннибалов. Подсказка: вам может понадобиться добавить
в MCState переопределения методов _eq_() и _hash_( ).
'''
'''
1. Измените WordSearchConstraint так, чтобы допускались перекрывающиеся
буквы.
2. Создайте систему решения задачи размещения элементов на печатной плате,
описанной в разделе 3.6, если вы этого еще не сделали.
3. Создайте программу, которая может решать су доку, используя систему решения
задач с ограни•1ениями, описанную в этой главе.git '''
'''
1. Добавьте в графовую структуру возможносп, удаления ребер и вершин.
2. Добавьте в графовую структуру поддержку тшравленных графов (диграфов).
3. Применив графовую структуру, описанную в ;пой главе, докажите или опровергн
ите классическую задачу о кенигсбергских мостах, описанную в «Википедии~:
https://ru. wikipedia. огg/wiki/Задача_ о_ семи_кёнигсбергских_мостах.'''
'''
1. Добавьте в GeneticAlgori thm поддержку расширенной формы турнирного отбора, которая может иногда выбирать вторую или третью по жизнеспособности
хромосому, основываясь на уменьшающейся вероятности.
2. Добавьте к структуре с ограничениями, описанной в главе 3, новую функцию,
которая решает любой произвольный CSP с использованием генетического
алгоритма. Возможной мерой жизнеспособности является количество ограничений, которые разрешаются данной хромосомой.
3. Создайте класс Bi tString, который реализует хромосому. Для того чтобы
вспомнить, что представляет собой битовая строка, обратитесь к главе 1. Затем
примените новый класс для решения задачи простого уравнения из раздела 5.3.
Как можно представить эту задачу в виде битовой строки? '''
'''
6.7. Упражнения
1. Создайте функцию, которая импортировала бы данные ш1 СSV-файла в объекты
DataPoint.
2. Используя внешнюю библиотеку, такую как matplotlib, создайте функцию, которая станет строить диаграмму рассеяния с цветовой кодировкой результатов
для любого запуска KMeans в случае двумерного набора данных.
3. Создайте новый инициализатор для KMeans, который будет принимать начальные позиции центроидов извне, а не назначать их случайным образом.
4. Исследуйте и реализуйте алгоритм k-средних++.
'''